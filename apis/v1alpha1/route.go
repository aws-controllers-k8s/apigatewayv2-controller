// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RouteSpec defines the desired state of Route.
//
// Represents a route.
type RouteSpec struct {

	// The API identifier.
	APIID *string `json:"apiID,omitempty"`
	// Specifies whether an API key is required for the route. Supported only for
	// WebSocket APIs.
	APIKeyRequired *bool                                    `json:"apiKeyRequired,omitempty"`
	APIRef         *ackv1alpha1.AWSResourceReferenceWrapper `json:"apiRef,omitempty"`
	// The authorization scopes supported by this route.
	AuthorizationScopes []*string `json:"authorizationScopes,omitempty"`
	// The authorization type for the route. For WebSocket APIs, valid values are
	// NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for
	// using a Lambda authorizer For HTTP APIs, valid values are NONE for open access,
	// JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and
	// CUSTOM for using a Lambda authorizer.
	AuthorizationType *string `json:"authorizationType,omitempty"`
	// The identifier of the Authorizer resource to be associated with this route.
	// The authorizer identifier is generated by API Gateway when you created the
	// authorizer.
	AuthorizerID  *string                                  `json:"authorizerID,omitempty"`
	AuthorizerRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"authorizerRef,omitempty"`
	// The model selection expression for the route. Supported only for WebSocket
	// APIs.
	ModelSelectionExpression *string `json:"modelSelectionExpression,omitempty"`
	// The operation name for the route.
	OperationName *string `json:"operationName,omitempty"`
	// The request models for the route. Supported only for WebSocket APIs.
	RequestModels map[string]*string `json:"requestModels,omitempty"`
	// The request parameters for the route. Supported only for WebSocket APIs.
	RequestParameters map[string]*ParameterConstraints `json:"requestParameters,omitempty"`
	// The route key for the route.
	// +kubebuilder:validation:Required
	RouteKey *string `json:"routeKey"`
	// The route response selection expression for the route. Supported only for
	// WebSocket APIs.
	RouteResponseSelectionExpression *string `json:"routeResponseSelectionExpression,omitempty"`
	// The target for the route.
	Target    *string                                  `json:"target,omitempty"`
	TargetRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"targetRef,omitempty"`
}

// RouteStatus defines the observed state of Route
type RouteStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Specifies whether a route is managed by API Gateway. If you created an API
	// using quick create, the $default route is managed by API Gateway. You can't
	// modify the $default route key.
	// +kubebuilder:validation:Optional
	APIGatewayManaged *bool `json:"apiGatewayManaged,omitempty"`
	// The route ID.
	// +kubebuilder:validation:Optional
	RouteID *string `json:"routeID,omitempty"`
}

// Route is the Schema for the Routes API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Route struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteSpec   `json:"spec,omitempty"`
	Status            RouteStatus `json:"status,omitempty"`
}

// RouteList contains a list of Route
// +kubebuilder:object:root=true
type RouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Route{}, &RouteList{})
}
