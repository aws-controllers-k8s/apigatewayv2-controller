// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// StageSpec defines the desired state of Stage.
//
// Represents an API stage.
type StageSpec struct {

	// Settings for logging access in this stage.
	AccessLogSettings *AccessLogSettings `json:"accessLogSettings,omitempty"`
	// The API identifier.
	APIID  *string                                  `json:"apiID,omitempty"`
	APIRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"apiRef,omitempty"`
	// Specifies whether updates to an API automatically trigger a new deployment.
	// The default value is false.
	AutoDeploy *bool `json:"autoDeploy,omitempty"`
	// The identifier of a client certificate for a Stage. Supported only for WebSocket
	// APIs.
	ClientCertificateID *string `json:"clientCertificateID,omitempty"`
	// The default route settings for the stage.
	DefaultRouteSettings *RouteSettings `json:"defaultRouteSettings,omitempty"`
	// The deployment identifier of the API stage.
	DeploymentID  *string                                  `json:"deploymentID,omitempty"`
	DeploymentRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"deploymentRef,omitempty"`
	// The description for the API stage.
	Description *string `json:"description,omitempty"`
	// Route settings for the stage, by routeKey.
	RouteSettings map[string]*RouteSettings `json:"routeSettings,omitempty"`
	// The name of the stage.
	// +kubebuilder:validation:Required
	StageName *string `json:"stageName"`
	// A map that defines the stage variables for a Stage. Variable names can have
	// alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.
	StageVariables map[string]*string `json:"stageVariables,omitempty"`
	// The collection of tags. Each tag element is associated with a given resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// StageStatus defines the observed state of Stage
type StageStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Specifies whether a stage is managed by API Gateway. If you created an API
	// using quick create, the $default stage is managed by API Gateway. You can't
	// modify the $default stage.
	// +kubebuilder:validation:Optional
	APIGatewayManaged *bool `json:"apiGatewayManaged,omitempty"`
	// The timestamp when the stage was created.
	// +kubebuilder:validation:Optional
	CreatedDate *metav1.Time `json:"createdDate,omitempty"`
	// Describes the status of the last deployment of a stage. Supported only for
	// stages with autoDeploy enabled.
	// +kubebuilder:validation:Optional
	LastDeploymentStatusMessage *string `json:"lastDeploymentStatusMessage,omitempty"`
	// The timestamp when the stage was last updated.
	// +kubebuilder:validation:Optional
	LastUpdatedDate *metav1.Time `json:"lastUpdatedDate,omitempty"`
}

// Stage is the Schema for the Stages API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Stage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StageSpec   `json:"spec,omitempty"`
	Status            StageStatus `json:"status,omitempty"`
}

// StageList contains a list of Stage
// +kubebuilder:object:root=true
type StageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stage `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Stage{}, &StageList{})
}
