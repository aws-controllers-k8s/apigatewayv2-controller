// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// IntegrationResponseSpec defines the desired state of IntegrationResponse.
//
// Represents an integration response.
type IntegrationResponseSpec struct {

	// The API identifier.
	// +kubebuilder:validation:Required
	APIID *string `json:"apiID"`
	// Specifies how to handle response payload content type conversions. Supported
	// values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:
	//
	// CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
	// to the corresponding binary blob.
	//
	// CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
	// string.
	//
	// If this property is not defined, the response payload will be passed through
	// from the integration response to the route response or method response without
	// modification.
	ContentHandlingStrategy *string `json:"contentHandlingStrategy,omitempty"`
	// The integration ID.
	// +kubebuilder:validation:Required
	IntegrationID *string `json:"integrationID"`
	// The integration response key.
	// +kubebuilder:validation:Required
	IntegrationResponseKey *string `json:"integrationResponseKey"`
	// A key-value map specifying response parameters that are passed to the method
	// response from the backend. The key is a method response header parameter
	// name and the mapped value is an integration response header value, a static
	// value enclosed within a pair of single quotes, or a JSON expression from
	// the integration response body. The mapping key must match the pattern of
	// method.response.header.{name}, where {name} is a valid and unique header
	// name. The mapped non-static value must match the pattern of integration.response.header.{name}
	// or integration.response.body.{JSON-expression}, where {name} is a valid and
	// unique response header name and {JSON-expression} is a valid JSON expression
	// without the $ prefix.
	ResponseParameters map[string]*string `json:"responseParameters,omitempty"`
	// The collection of response templates for the integration response as a string-to-string
	// map of key-value pairs. Response templates are represented as a key/value
	// map, with a content-type as the key and a template as the value.
	ResponseTemplates map[string]*string `json:"responseTemplates,omitempty"`
	// The template selection expression for the integration response. Supported
	// only for WebSocket APIs.
	TemplateSelectionExpression *string `json:"templateSelectionExpression,omitempty"`
}

// IntegrationResponseStatus defines the observed state of IntegrationResponse
type IntegrationResponseStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The integration response ID.
	// +kubebuilder:validation:Optional
	IntegrationResponseID *string `json:"integrationResponseID,omitempty"`
}

// IntegrationResponse is the Schema for the IntegrationResponses API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type IntegrationResponse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationResponseSpec   `json:"spec,omitempty"`
	Status            IntegrationResponseStatus `json:"status,omitempty"`
}

// IntegrationResponseList contains a list of IntegrationResponse
// +kubebuilder:object:root=true
type IntegrationResponseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IntegrationResponse `json:"items"`
}

func init() {
	SchemeBuilder.Register(&IntegrationResponse{}, &IntegrationResponseList{})
}
