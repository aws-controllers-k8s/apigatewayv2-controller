// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package integration_response

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.APIID, b.ko.Spec.APIID) {
		delta.Add("Spec.APIID", a.ko.Spec.APIID, b.ko.Spec.APIID)
	} else if a.ko.Spec.APIID != nil && b.ko.Spec.APIID != nil {
		if *a.ko.Spec.APIID != *b.ko.Spec.APIID {
			delta.Add("Spec.APIID", a.ko.Spec.APIID, b.ko.Spec.APIID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ContentHandlingStrategy, b.ko.Spec.ContentHandlingStrategy) {
		delta.Add("Spec.ContentHandlingStrategy", a.ko.Spec.ContentHandlingStrategy, b.ko.Spec.ContentHandlingStrategy)
	} else if a.ko.Spec.ContentHandlingStrategy != nil && b.ko.Spec.ContentHandlingStrategy != nil {
		if *a.ko.Spec.ContentHandlingStrategy != *b.ko.Spec.ContentHandlingStrategy {
			delta.Add("Spec.ContentHandlingStrategy", a.ko.Spec.ContentHandlingStrategy, b.ko.Spec.ContentHandlingStrategy)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IntegrationID, b.ko.Spec.IntegrationID) {
		delta.Add("Spec.IntegrationID", a.ko.Spec.IntegrationID, b.ko.Spec.IntegrationID)
	} else if a.ko.Spec.IntegrationID != nil && b.ko.Spec.IntegrationID != nil {
		if *a.ko.Spec.IntegrationID != *b.ko.Spec.IntegrationID {
			delta.Add("Spec.IntegrationID", a.ko.Spec.IntegrationID, b.ko.Spec.IntegrationID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IntegrationResponseKey, b.ko.Spec.IntegrationResponseKey) {
		delta.Add("Spec.IntegrationResponseKey", a.ko.Spec.IntegrationResponseKey, b.ko.Spec.IntegrationResponseKey)
	} else if a.ko.Spec.IntegrationResponseKey != nil && b.ko.Spec.IntegrationResponseKey != nil {
		if *a.ko.Spec.IntegrationResponseKey != *b.ko.Spec.IntegrationResponseKey {
			delta.Add("Spec.IntegrationResponseKey", a.ko.Spec.IntegrationResponseKey, b.ko.Spec.IntegrationResponseKey)
		}
	}
	if len(a.ko.Spec.ResponseParameters) != len(b.ko.Spec.ResponseParameters) {
		delta.Add("Spec.ResponseParameters", a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters)
	} else if len(a.ko.Spec.ResponseParameters) > 0 {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters) {
			delta.Add("Spec.ResponseParameters", a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters)
		}
	}
	if len(a.ko.Spec.ResponseTemplates) != len(b.ko.Spec.ResponseTemplates) {
		delta.Add("Spec.ResponseTemplates", a.ko.Spec.ResponseTemplates, b.ko.Spec.ResponseTemplates)
	} else if len(a.ko.Spec.ResponseTemplates) > 0 {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.ResponseTemplates, b.ko.Spec.ResponseTemplates) {
			delta.Add("Spec.ResponseTemplates", a.ko.Spec.ResponseTemplates, b.ko.Spec.ResponseTemplates)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TemplateSelectionExpression, b.ko.Spec.TemplateSelectionExpression) {
		delta.Add("Spec.TemplateSelectionExpression", a.ko.Spec.TemplateSelectionExpression, b.ko.Spec.TemplateSelectionExpression)
	} else if a.ko.Spec.TemplateSelectionExpression != nil && b.ko.Spec.TemplateSelectionExpression != nil {
		if *a.ko.Spec.TemplateSelectionExpression != *b.ko.Spec.TemplateSelectionExpression {
			delta.Add("Spec.TemplateSelectionExpression", a.ko.Spec.TemplateSelectionExpression, b.ko.Spec.TemplateSelectionExpression)
		}
	}

	return delta
}
