// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package route

import (
	"context"
	"fmt"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	acktypes "github.com/aws-controllers-k8s/runtime/pkg/types"

	svcapitypes "github.com/aws-controllers-k8s/apigatewayv2-controller/apis/v1alpha1"
)

// ClearResolvedReferences removes any reference values that were made
// concrete in the spec. It returns a copy of the input AWSResource which
// contains the original *Ref values, but none of their respective concrete
// values.
func (rm *resourceManager) ClearResolvedReferences(res acktypes.AWSResource) acktypes.AWSResource {
	ko := rm.concreteResource(res).ko.DeepCopy()

	if ko.Spec.APIRef != nil {
		ko.Spec.APIID = nil
	}

	if ko.Spec.AuthorizerRef != nil {
		ko.Spec.AuthorizerID = nil
	}

	if ko.Spec.TargetRef != nil {
		ko.Spec.Target = nil
	}

	return &resource{ko}
}

// ResolveReferences finds if there are any Reference field(s) present
// inside AWSResource passed in the parameter and attempts to resolve those
// reference field(s) into their respective target field(s). It returns a
// copy of the input AWSResource with resolved reference(s), a boolean which
// is set to true if the resource contains any references (regardless of if
// they are resolved successfully) and an error if the passed AWSResource's
// reference field(s) could not be resolved.
func (rm *resourceManager) ResolveReferences(
	ctx context.Context,
	apiReader client.Reader,
	res acktypes.AWSResource,
) (acktypes.AWSResource, bool, error) {
	ko := rm.concreteResource(res).ko

	resourceHasReferences := false
	err := validateReferenceFields(ko)
	if fieldHasReferences, err := rm.resolveReferenceForAPIID(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForAuthorizerID(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	if fieldHasReferences, err := rm.resolveReferenceForTarget(ctx, apiReader, ko); err != nil {
		return &resource{ko}, (resourceHasReferences || fieldHasReferences), err
	} else {
		resourceHasReferences = resourceHasReferences || fieldHasReferences
	}

	// if the Target was provided using a reference, prepend "integrations/"
	// with the IntegrationId from TargetRef
	if ko.Spec.TargetRef != nil && ko.Spec.Target != nil {
		targetStr := fmt.Sprintf("integrations/%s", *ko.Spec.Target)
		ko.Spec.Target = &targetStr
	}

	return &resource{ko}, resourceHasReferences, err
}

// validateReferenceFields validates the reference field and corresponding
// identifier field.
func validateReferenceFields(ko *svcapitypes.Route) error {

	if ko.Spec.APIRef != nil && ko.Spec.APIID != nil {
		return ackerr.ResourceReferenceAndIDNotSupportedFor("APIID", "APIRef")
	}
	if ko.Spec.APIRef == nil && ko.Spec.APIID == nil {
		return ackerr.ResourceReferenceOrIDRequiredFor("APIID", "APIRef")
	}

	if ko.Spec.AuthorizerRef != nil && ko.Spec.AuthorizerID != nil {
		return ackerr.ResourceReferenceAndIDNotSupportedFor("AuthorizerID", "AuthorizerRef")
	}

	if ko.Spec.TargetRef != nil && ko.Spec.Target != nil {
		return ackerr.ResourceReferenceAndIDNotSupportedFor("Target", "TargetRef")
	}
	return nil
}

// resolveReferenceForAPIID reads the resource referenced
// from APIRef field and sets the APIID
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForAPIID(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.Route,
) (hasReferences bool, err error) {
	if ko.Spec.APIRef != nil && ko.Spec.APIRef.From != nil {
		hasReferences = true
		arr := ko.Spec.APIRef.From
		if arr.Name == nil || *arr.Name == "" {
			return hasReferences, fmt.Errorf("provided resource reference is nil or empty: APIRef")
		}
		namespace := ko.ObjectMeta.GetNamespace()
		if arr.Namespace != nil && *arr.Namespace != "" {
			namespace = *arr.Namespace
		}
		obj := &svcapitypes.API{}
		if err := getReferencedResourceState_API(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
			return hasReferences, err
		}
		ko.Spec.APIID = (*string)(obj.Status.APIID)
	}

	return hasReferences, nil
}

// getReferencedResourceState_API looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_API(
	ctx context.Context,
	apiReader client.Reader,
	obj *svcapitypes.API,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeReady &&
			cond.Status == corev1.ConditionFalse &&
			*cond.Reason == ackcondition.TerminalReason {
			return ackerr.ResourceReferenceTerminalFor(
				"API",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"API",
			namespace, name)
	}
	var refResourceReady bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeReady &&
			cond.Status == corev1.ConditionTrue {
			refResourceReady = true
		}
	}
	if !refResourceReady {
		return ackerr.ResourceReferenceNotSyncedFor(
			"API",
			namespace, name)
	}
	if obj.Status.APIID == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"API",
			namespace, name,
			"Status.APIID")
	}
	return nil
}

// resolveReferenceForAuthorizerID reads the resource referenced
// from AuthorizerRef field and sets the AuthorizerID
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForAuthorizerID(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.Route,
) (hasReferences bool, err error) {
	if ko.Spec.AuthorizerRef != nil && ko.Spec.AuthorizerRef.From != nil {
		hasReferences = true
		arr := ko.Spec.AuthorizerRef.From
		if arr.Name == nil || *arr.Name == "" {
			return hasReferences, fmt.Errorf("provided resource reference is nil or empty: AuthorizerRef")
		}
		namespace := ko.ObjectMeta.GetNamespace()
		if arr.Namespace != nil && *arr.Namespace != "" {
			namespace = *arr.Namespace
		}
		obj := &svcapitypes.Authorizer{}
		if err := getReferencedResourceState_Authorizer(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
			return hasReferences, err
		}
		ko.Spec.AuthorizerID = (*string)(obj.Status.AuthorizerID)
	}

	return hasReferences, nil
}

// getReferencedResourceState_Authorizer looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_Authorizer(
	ctx context.Context,
	apiReader client.Reader,
	obj *svcapitypes.Authorizer,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeReady &&
			cond.Status == corev1.ConditionFalse &&
			*cond.Reason == ackcondition.TerminalReason {
			return ackerr.ResourceReferenceTerminalFor(
				"Authorizer",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"Authorizer",
			namespace, name)
	}
	var refResourceReady bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeReady &&
			cond.Status == corev1.ConditionTrue {
			refResourceReady = true
		}
	}
	if !refResourceReady {
		return ackerr.ResourceReferenceNotSyncedFor(
			"Authorizer",
			namespace, name)
	}
	if obj.Status.AuthorizerID == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"Authorizer",
			namespace, name,
			"Status.AuthorizerID")
	}
	return nil
}

// resolveReferenceForTarget reads the resource referenced
// from TargetRef field and sets the Target
// from referenced resource. Returns a boolean indicating whether a reference
// contains references, or an error
func (rm *resourceManager) resolveReferenceForTarget(
	ctx context.Context,
	apiReader client.Reader,
	ko *svcapitypes.Route,
) (hasReferences bool, err error) {
	if ko.Spec.TargetRef != nil && ko.Spec.TargetRef.From != nil {
		hasReferences = true
		arr := ko.Spec.TargetRef.From
		if arr.Name == nil || *arr.Name == "" {
			return hasReferences, fmt.Errorf("provided resource reference is nil or empty: TargetRef")
		}
		namespace := ko.ObjectMeta.GetNamespace()
		if arr.Namespace != nil && *arr.Namespace != "" {
			namespace = *arr.Namespace
		}
		obj := &svcapitypes.Integration{}
		if err := getReferencedResourceState_Integration(ctx, apiReader, obj, *arr.Name, namespace); err != nil {
			return hasReferences, err
		}
		ko.Spec.Target = (*string)(obj.Status.IntegrationID)
	}

	return hasReferences, nil
}

// getReferencedResourceState_Integration looks up whether a referenced resource
// exists and is in a ACK.ResourceSynced=True state. If the referenced resource does exist and is
// in a Synced state, returns nil, otherwise returns `ackerr.ResourceReferenceTerminalFor` or
// `ResourceReferenceNotSyncedFor` depending on if the resource is in a Terminal state.
func getReferencedResourceState_Integration(
	ctx context.Context,
	apiReader client.Reader,
	obj *svcapitypes.Integration,
	name string, // the Kubernetes name of the referenced resource
	namespace string, // the Kubernetes namespace of the referenced resource
) error {
	namespacedName := types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}
	err := apiReader.Get(ctx, namespacedName, obj)
	if err != nil {
		return err
	}
	var refResourceTerminal bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeReady &&
			cond.Status == corev1.ConditionFalse &&
			*cond.Reason == ackcondition.TerminalReason {
			return ackerr.ResourceReferenceTerminalFor(
				"Integration",
				namespace, name)
		}
	}
	if refResourceTerminal {
		return ackerr.ResourceReferenceTerminalFor(
			"Integration",
			namespace, name)
	}
	var refResourceReady bool
	for _, cond := range obj.Status.Conditions {
		if cond.Type == ackv1alpha1.ConditionTypeReady &&
			cond.Status == corev1.ConditionTrue {
			refResourceReady = true
		}
	}
	if !refResourceReady {
		return ackerr.ResourceReferenceNotSyncedFor(
			"Integration",
			namespace, name)
	}
	if obj.Status.IntegrationID == nil {
		return ackerr.ResourceReferenceMissingTargetFieldFor(
			"Integration",
			namespace, name,
			"Status.IntegrationID")
	}
	return nil
}
